{"ast":null,"code":"var _jsxFileName = \"/Users/1000010hawk/Desktop/Lambda/BuildWeek/unit3/Front-end/src/Components/Home.js\",\n    _s = $RefreshSig$();\n\nimport * as THREE from \"three\";\nimport React, { useRef, Suspense } from \"react\";\nimport { Canvas, extend, useFrame, useLoader } from \"@react-three/fiber\";\nimport { shaderMaterial } from \"@react-three/drei\";\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WaveShaderMaterial = shaderMaterial( // Uniform\n{\n  uTime: 0,\n  uColor: new THREE.Color(0.0, 0.0, 0.0),\n  uTexture: new THREE.Texture()\n}, // Vertex Shader\n\"\\n    precision mediump float;\\n    varying vec2 vUv;\\n    varying float vWave;\\n    uniform float uTime;\\n    //\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_1146352920(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289_1146352920(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute_1146352920(vec4 x) {\\n     return mod289_1146352920(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt_1146352920(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise3(vec3 v)\\n  {\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D_1146352920 = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g_1146352920 = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g_1146352920;\\n  vec3 i1 = min( g_1146352920.xyz, l.zxy );\\n  vec3 i2 = max( g_1146352920.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D_1146352920.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289_1146352920(i);\\n  vec4 p = permute_1146352920( permute_1146352920( permute_1146352920(\\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D_1146352920.wyz - D_1146352920.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1_1146352920 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0_1146352920 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1_1146352920.xy,h.z);\\n  vec3 p3 = vec3(a1_1146352920.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt_1146352920(vec4(dot(p0_1146352920,p0_1146352920), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0_1146352920 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0_1146352920,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\\n    void main() {\\n      vUv = uv;\\n      vec3 pos = position;\\n      float noiseFreq = 1.0;\\n      float noiseAmp = 0.4;\\n      vec3 noisePos = vec3(pos.x * noiseFreq + uTime, pos.y, pos.z);\\n      pos.z += snoise3(noisePos) * noiseAmp;\\n      vWave = pos.z;\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);  \\n    }\\n  \", // Fragment Shader\n\"\\n    precision mediump float;\\n    uniform vec3 uColor;\\n    uniform float uTime;\\n    uniform sampler2D uTexture;\\n    varying vec2 vUv;\\n    varying float vWave;\\n    void main() {\\n      float wave = vWave * 0.1;\\n      vec3 texture = texture2D(uTexture, vUv + wave).rgb;\\n      gl_FragColor = vec4(texture, 1.0); \\n    }\\n  \");\nextend({\n  WaveShaderMaterial\n});\n\nconst Wave = () => {\n  _s();\n\n  const ref = useRef();\n  useFrame(({\n    clock\n  }) => ref.current.uTime = clock.getElapsedTime());\n  const [image] = useLoader(THREE.TextureLoader, [\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/SAATM-Map.svg/1200px-SAATM-Map.svg.png\"]);\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    children: [/*#__PURE__*/_jsxDEV(\"planeBufferGeometry\", {\n      args: [.8, .8, 15, 15]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"waveShaderMaterial\", {\n      uColor: \"hotpink\",\n      ref: ref,\n      uTexture: image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Wave, \"wdEDJUgoFCG+cVpKLHan5SiFV1U=\", false, function () {\n  return [useFrame, useLoader];\n});\n\n_c = Wave;\n\nconst Scene = () => {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    camera: {\n      fov: 12,\n      position: [0, 0, 5]\n    },\n    children: /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: null,\n      children: /*#__PURE__*/_jsxDEV(Wave, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Scene;\nexport default function Home() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(StyledHome, {\n      children: /*#__PURE__*/_jsxDEV(Scene, {\n        className: \"image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_c3 = Home;\n;\nconst StyledHome = styled.div`\nwidth:100%;\nheight: 90vh;\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n\nh1{\ncolor: #ffffff;\nmargin: 2%;\nfont-size: 4rem;\nfont-family: 'Fredoka One';\n/* position: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%,-50%);\nz-index: 1;\n\nfont-weight: 900;\nletter-spacing: 0.04em;\nwhite-space: nowrap; */\n}\n`;\n_c4 = StyledHome;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Wave\");\n$RefreshReg$(_c2, \"Scene\");\n$RefreshReg$(_c3, \"Home\");\n$RefreshReg$(_c4, \"StyledHome\");","map":{"version":3,"sources":["/Users/1000010hawk/Desktop/Lambda/BuildWeek/unit3/Front-end/src/Components/Home.js"],"names":["THREE","React","useRef","Suspense","Canvas","extend","useFrame","useLoader","shaderMaterial","styled","WaveShaderMaterial","uTime","uColor","Color","uTexture","Texture","Wave","ref","clock","current","getElapsedTime","image","TextureLoader","Scene","fov","position","Home","StyledHome","div"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,QAAzB,EAAmCC,SAAnC,QAAoD,oBAApD;AACA,SAASC,cAAT,QAA+B,mBAA/B;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;;;AAEA,MAAMC,kBAAkB,GAAGF,cAAc,EACvC;AACA;AACEG,EAAAA,KAAK,EAAE,CADT;AAEEC,EAAAA,MAAM,EAAE,IAAIZ,KAAK,CAACa,KAAV,CAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAFV;AAGEC,EAAAA,QAAQ,EAAE,IAAId,KAAK,CAACe,OAAV;AAHZ,CAFuC,EAOvC;AAPuC,onHAyBvC;AAzBuC,4UAAzC;AAyCAV,MAAM,CAAC;AAAEK,EAAAA;AAAF,CAAD,CAAN;;AAEA,MAAMM,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAMC,GAAG,GAAGf,MAAM,EAAlB;AACAI,EAAAA,QAAQ,CAAC,CAAC;AAAEY,IAAAA;AAAF,GAAD,KAAgBD,GAAG,CAACE,OAAJ,CAAYR,KAAZ,GAAoBO,KAAK,CAACE,cAAN,EAArC,CAAR;AAEA,QAAM,CAACC,KAAD,IAAUd,SAAS,CAACP,KAAK,CAACsB,aAAP,EAAsB,CAC7C,kGAD6C,CAAtB,CAAzB;AAIA,sBACE;AAAA,4BACE;AAAqB,MAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb;AAA3B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAoB,MAAA,MAAM,EAAE,SAA5B;AAAuC,MAAA,GAAG,EAAEL,GAA5C;AAAiD,MAAA,QAAQ,EAAEI;AAA3D;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAdD;;GAAML,I;UAEJV,Q,EAEgBC,S;;;KAJZS,I;;AAgBN,MAAMO,KAAK,GAAG,MAAM;AAClB,sBACE,QAAC,MAAD;AAAQ,IAAA,MAAM,EAAE;AAAEC,MAAAA,GAAG,EAAE,EAAP;AAAWC,MAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAArB,KAAhB;AAAA,2BACE,QAAC,QAAD;AAAU,MAAA,QAAQ,EAAE,IAApB;AAAA,6BACE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CARD;;MAAMF,K;AAUN,eAAe,SAASG,IAAT,GAAgB;AAC7B,sBACE;AAAA,2BACA,QAAC,UAAD;AAAA,6BAEE,QAAC,KAAD;AAAO,QAAA,SAAS,EAAE;AAAlB;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA;AADA,mBADF;AAQD;MATuBA,I;AASvB;AAED,MAAMC,UAAU,GAAGlB,MAAM,CAACmB,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAtBA;MAAMD,U","sourcesContent":["import * as THREE from \"three\";\nimport React, { useRef, Suspense } from \"react\";\nimport { Canvas, extend, useFrame, useLoader } from \"@react-three/fiber\";\nimport { shaderMaterial } from \"@react-three/drei\";\nimport glsl from \"babel-plugin-glsl/macro\";\nimport styled from 'styled-components'\n\nconst WaveShaderMaterial = shaderMaterial(\n  // Uniform\n  {\n    uTime: 0,\n    uColor: new THREE.Color(0.0, 0.0, 0.0),\n    uTexture: new THREE.Texture(),\n  },\n  // Vertex Shader\n  glsl`\n    precision mediump float;\n    varying vec2 vUv;\n    varying float vWave;\n    uniform float uTime;\n    #pragma glslify: snoise3 = require(glsl-noise/simplex/3d);\n    void main() {\n      vUv = uv;\n      vec3 pos = position;\n      float noiseFreq = 1.0;\n      float noiseAmp = 0.4;\n      vec3 noisePos = vec3(pos.x * noiseFreq + uTime, pos.y, pos.z);\n      pos.z += snoise3(noisePos) * noiseAmp;\n      vWave = pos.z;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);  \n    }\n  `,\n  // Fragment Shader\n  glsl`\n    precision mediump float;\n    uniform vec3 uColor;\n    uniform float uTime;\n    uniform sampler2D uTexture;\n    varying vec2 vUv;\n    varying float vWave;\n    void main() {\n      float wave = vWave * 0.1;\n      vec3 texture = texture2D(uTexture, vUv + wave).rgb;\n      gl_FragColor = vec4(texture, 1.0); \n    }\n  `\n);\n\nextend({ WaveShaderMaterial });\n\nconst Wave = () => {\n  const ref = useRef();\n  useFrame(({ clock }) => (ref.current.uTime = clock.getElapsedTime()));\n\n  const [image] = useLoader(THREE.TextureLoader, [\n    \"https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/SAATM-Map.svg/1200px-SAATM-Map.svg.png\",\n  ]);\n\n  return (\n    <mesh>\n      <planeBufferGeometry args={[.8, .8, 15, 15]} />\n      <waveShaderMaterial uColor={\"hotpink\"} ref={ref} uTexture={image} />\n    </mesh>\n  );\n};\n\nconst Scene = () => {\n  return (\n    <Canvas camera={{ fov: 12, position: [0, 0, 5] }}>\n      <Suspense fallback={null}>\n        <Wave />\n      </Suspense>\n    </Canvas>\n  );\n};\n\nexport default function Home() {\n  return (\n    <>\n    <StyledHome>\n      {/* <h1>Field Markets</h1> */}\n      <Scene className={\"image\"}/>\n    </StyledHome>\n    </>\n  );\n};\n\nconst StyledHome = styled.div`\nwidth:100%;\nheight: 90vh;\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n\nh1{\ncolor: #ffffff;\nmargin: 2%;\nfont-size: 4rem;\nfont-family: 'Fredoka One';\n/* position: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%,-50%);\nz-index: 1;\n\nfont-weight: 900;\nletter-spacing: 0.04em;\nwhite-space: nowrap; */\n}\n`"]},"metadata":{},"sourceType":"module"}