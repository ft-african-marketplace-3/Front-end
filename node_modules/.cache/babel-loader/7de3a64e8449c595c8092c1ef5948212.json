{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { useFrame, extend } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { Position } from '../helpers/Position.js';\nlet i, instanceRef;\nconst context = /*#__PURE__*/React.createContext(null);\nconst parentMatrix = new THREE.Matrix4();\nconst instanceMatrix = new THREE.Matrix4();\nconst tempMatrix = new THREE.Matrix4();\nconst color = new THREE.Color();\nconst translation = new THREE.Vector3();\nconst rotation = new THREE.Quaternion();\nconst scale = new THREE.Vector3();\nconst Instances = /*#__PURE__*/React.forwardRef(({\n  children,\n  range,\n  limit = 1000,\n  ...props\n}, ref) => {\n  const parentRef = React.useRef(null);\n  const [instances, setInstances] = React.useState([]);\n  const [[matrices, colors]] = React.useState(() => {\n    const mArray = new Float32Array(limit * 16);\n\n    for (i = 0; i < limit; i++) tempMatrix.identity().toArray(mArray, i * 16);\n\n    return [mArray, new Float32Array([...new Array(limit * 3)].map(() => 1))];\n  });\n  React.useLayoutEffect(() => {\n    parentRef.current.count = parentRef.current.instanceMatrix.updateRange.count = parentRef.current.instanceColor.updateRange.count = Math.min(limit, range !== undefined ? range : limit, instances.length);\n  }, [instances, range]);\n  React.useEffect(() => {\n    // We might be a frame too late? 🤷‍♂️\n    parentRef.current.instanceMatrix.needsUpdate = true;\n  });\n  useFrame(state => {\n    parentRef.current.updateMatrix();\n    parentRef.current.updateMatrixWorld();\n    parentMatrix.copy(parentRef.current.matrixWorld).invert();\n\n    for (i = 0; i < instances.length; i++) {\n      instanceRef = instances[i].current; // Multiply the inverse of the InstancedMesh world matrix or else\n      // Instances will be double-transformed if <Instances> isn't at identity\n\n      instanceRef.matrixWorld.decompose(translation, rotation, scale);\n      instanceMatrix.compose(translation, rotation, scale).premultiply(parentMatrix);\n\n      if (!instanceMatrix.equals(tempMatrix.fromArray(matrices, i * 16))) {\n        instanceMatrix.toArray(matrices, i * 16);\n        parentRef.current.instanceMatrix.needsUpdate = true;\n      }\n\n      if (!instanceRef.color.equals(color.fromArray(colors, i * 3))) {\n        instanceRef.color.toArray(colors, i * 3);\n        parentRef.current.instanceColor.needsUpdate = true;\n      }\n    }\n  });\n  const events = React.useMemo(() => {\n    const events = {};\n\n    for (i = 0; i < instances.length; i++) {\n      var _instances$i$current;\n\n      Object.assign(events, (_instances$i$current = instances[i].current) == null ? void 0 : _instances$i$current.__r3f.handlers);\n    }\n\n    return Object.keys(events).reduce((prev, key) => ({ ...prev,\n      [key]: e => {\n        var _instances$e$instance, _instances$e$instance2, _instances$e$instance3;\n\n        return (_instances$e$instance = instances[e.instanceId].current) == null ? void 0 : (_instances$e$instance2 = _instances$e$instance.__r3f) == null ? void 0 : (_instances$e$instance3 = _instances$e$instance2.handlers) == null ? void 0 : _instances$e$instance3[key](e);\n      }\n    }), {});\n  }, [instances]);\n  const api = React.useMemo(() => ({\n    subscribe: ref => {\n      setInstances(instances => [...instances, ref]);\n      return () => setInstances(instances => instances.filter(item => item.current !== ref.current));\n    }\n  }), []);\n  return /*#__PURE__*/React.createElement(\"instancedMesh\", _extends({\n    matrixAutoUpdate: false,\n    ref: mergeRefs([ref, parentRef]),\n    args: [null, null, 0]\n  }, events, props), /*#__PURE__*/React.createElement(\"instancedBufferAttribute\", {\n    attach: \"instanceMatrix\",\n    count: matrices.length / 16,\n    array: matrices,\n    itemSize: 16\n  }), /*#__PURE__*/React.createElement(\"instancedBufferAttribute\", {\n    attach: \"instanceColor\",\n    count: colors.length / 3,\n    array: colors,\n    itemSize: 3\n  }), /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n});\nconst Instance = /*#__PURE__*/React.forwardRef(({\n  children,\n  ...props\n}, ref) => {\n  React.useMemo(() => extend({\n    Position\n  }), []);\n  const group = React.useRef();\n  const {\n    subscribe\n  } = React.useContext(context);\n  React.useLayoutEffect(() => subscribe(group), []);\n  return /*#__PURE__*/React.createElement(\"position\", _extends({\n    ref: mergeRefs([ref, group])\n  }, props), children);\n});\nexport { Instance, Instances };","map":{"version":3,"sources":["/Users/becca/Desktop/lambda2/Unit 2/Unit 2: Sprint 4 -- Build Week/Front-end/node_modules/@react-three/drei/core/Instances.js"],"names":["_extends","THREE","React","useFrame","extend","mergeRefs","Position","i","instanceRef","context","createContext","parentMatrix","Matrix4","instanceMatrix","tempMatrix","color","Color","translation","Vector3","rotation","Quaternion","scale","Instances","forwardRef","children","range","limit","props","ref","parentRef","useRef","instances","setInstances","useState","matrices","colors","mArray","Float32Array","identity","toArray","Array","map","useLayoutEffect","current","count","updateRange","instanceColor","Math","min","undefined","length","useEffect","needsUpdate","state","updateMatrix","updateMatrixWorld","copy","matrixWorld","invert","decompose","compose","premultiply","equals","fromArray","events","useMemo","_instances$i$current","Object","assign","__r3f","handlers","keys","reduce","prev","key","e","_instances$e$instance","_instances$e$instance2","_instances$e$instance3","instanceId","api","subscribe","filter","item","createElement","matrixAutoUpdate","args","attach","array","itemSize","Provider","value","Instance","group","useContext"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { useFrame, extend } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { Position } from '../helpers/Position.js';\n\nlet i, instanceRef;\nconst context = /*#__PURE__*/React.createContext(null);\nconst parentMatrix = new THREE.Matrix4();\nconst instanceMatrix = new THREE.Matrix4();\nconst tempMatrix = new THREE.Matrix4();\nconst color = new THREE.Color();\nconst translation = new THREE.Vector3();\nconst rotation = new THREE.Quaternion();\nconst scale = new THREE.Vector3();\nconst Instances = /*#__PURE__*/React.forwardRef(({\n  children,\n  range,\n  limit = 1000,\n  ...props\n}, ref) => {\n  const parentRef = React.useRef(null);\n  const [instances, setInstances] = React.useState([]);\n  const [[matrices, colors]] = React.useState(() => {\n    const mArray = new Float32Array(limit * 16);\n\n    for (i = 0; i < limit; i++) tempMatrix.identity().toArray(mArray, i * 16);\n\n    return [mArray, new Float32Array([...new Array(limit * 3)].map(() => 1))];\n  });\n  React.useLayoutEffect(() => {\n    parentRef.current.count = parentRef.current.instanceMatrix.updateRange.count = parentRef.current.instanceColor.updateRange.count = Math.min(limit, range !== undefined ? range : limit, instances.length);\n  }, [instances, range]);\n  React.useEffect(() => {\n    // We might be a frame too late? 🤷‍♂️\n    parentRef.current.instanceMatrix.needsUpdate = true;\n  });\n  useFrame(state => {\n    parentRef.current.updateMatrix();\n    parentRef.current.updateMatrixWorld();\n    parentMatrix.copy(parentRef.current.matrixWorld).invert();\n\n    for (i = 0; i < instances.length; i++) {\n      instanceRef = instances[i].current; // Multiply the inverse of the InstancedMesh world matrix or else\n      // Instances will be double-transformed if <Instances> isn't at identity\n\n      instanceRef.matrixWorld.decompose(translation, rotation, scale);\n      instanceMatrix.compose(translation, rotation, scale).premultiply(parentMatrix);\n\n      if (!instanceMatrix.equals(tempMatrix.fromArray(matrices, i * 16))) {\n        instanceMatrix.toArray(matrices, i * 16);\n        parentRef.current.instanceMatrix.needsUpdate = true;\n      }\n\n      if (!instanceRef.color.equals(color.fromArray(colors, i * 3))) {\n        instanceRef.color.toArray(colors, i * 3);\n        parentRef.current.instanceColor.needsUpdate = true;\n      }\n    }\n  });\n  const events = React.useMemo(() => {\n    const events = {};\n\n    for (i = 0; i < instances.length; i++) {\n      var _instances$i$current;\n\n      Object.assign(events, (_instances$i$current = instances[i].current) == null ? void 0 : _instances$i$current.__r3f.handlers);\n    }\n\n    return Object.keys(events).reduce((prev, key) => ({ ...prev,\n      [key]: e => {\n        var _instances$e$instance, _instances$e$instance2, _instances$e$instance3;\n\n        return (_instances$e$instance = instances[e.instanceId].current) == null ? void 0 : (_instances$e$instance2 = _instances$e$instance.__r3f) == null ? void 0 : (_instances$e$instance3 = _instances$e$instance2.handlers) == null ? void 0 : _instances$e$instance3[key](e);\n      }\n    }), {});\n  }, [instances]);\n  const api = React.useMemo(() => ({\n    subscribe: ref => {\n      setInstances(instances => [...instances, ref]);\n      return () => setInstances(instances => instances.filter(item => item.current !== ref.current));\n    }\n  }), []);\n  return /*#__PURE__*/React.createElement(\"instancedMesh\", _extends({\n    matrixAutoUpdate: false,\n    ref: mergeRefs([ref, parentRef]),\n    args: [null, null, 0]\n  }, events, props), /*#__PURE__*/React.createElement(\"instancedBufferAttribute\", {\n    attach: \"instanceMatrix\",\n    count: matrices.length / 16,\n    array: matrices,\n    itemSize: 16\n  }), /*#__PURE__*/React.createElement(\"instancedBufferAttribute\", {\n    attach: \"instanceColor\",\n    count: colors.length / 3,\n    array: colors,\n    itemSize: 3\n  }), /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n});\nconst Instance = /*#__PURE__*/React.forwardRef(({\n  children,\n  ...props\n}, ref) => {\n  React.useMemo(() => extend({\n    Position\n  }), []);\n  const group = React.useRef();\n  const {\n    subscribe\n  } = React.useContext(context);\n  React.useLayoutEffect(() => subscribe(group), []);\n  return /*#__PURE__*/React.createElement(\"position\", _extends({\n    ref: mergeRefs([ref, group])\n  }, props), children);\n});\n\nexport { Instance, Instances };\n"]},"metadata":{},"sourceType":"module"}